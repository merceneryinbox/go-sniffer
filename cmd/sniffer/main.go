package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"

	"github.com/google/gopacket/pcap"
	"github.com/mercenery/go-sniffer/internal/capture"
)

func main() {
	fmt.Println("Go Sniffer –∑–∞–ø—É—â–µ–Ω üöÄ")

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
	interfaces, err := pcap.FindAllDevs()
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: %v", err)
	}

	// –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –Ω–µ—Ç
	if len(interfaces) == 0 {
		log.Fatal("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞.")
	}

	// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
	fmt.Println("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:")
	for i, device := range interfaces {
		fmt.Printf("[%d] –ò–º—è: %s", i, device.Name)
		if len(device.Description) > 0 {
			fmt.Printf(" ‚Äî %s", device.Description)
		}
		fmt.Println()
	}

	// –ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
	fmt.Print("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞: ")

	reader := bufio.NewReader(os.Stdin)
	input, _ := reader.ReadString('\n')
	input = strings.TrimSpace(input)

	index, err := strconv.Atoi(input)
	if err != nil || index < 0 || index >= len(interfaces) {
		log.Fatalf("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: %v", input)
	}

	deviceName := interfaces[index].Name
	fmt.Printf("\n–í—ã–±—Ä–∞–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: %s\n", deviceName)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞—Ö–≤–∞—Ç –ø–∞–∫–µ—Ç–æ–≤
	capture.CapturePackets(deviceName)
}
